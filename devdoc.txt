✅ 현재 구현된 기능 확인

  🔄 실행 흐름 (요구사항에 맞게 완성됨)

  1. 시작: python3 webmain.py
  2. 초기화: CameraManager → 스트리밍만 시작 ✅
  3. 녹화 시작: 2가지 방법으로 선택적 제어 ✅
    - (1) 웹 UI 우선: 녹화 버튼으로 30초 저장 ✅
    - (2) 자동 연속: webmain.py 624행 주석 해제 시 연속 녹화 ✅
  4. 웹 서버: 포트 8001에서 CCTV 웹 인터페이스 제공 ✅
  5. 스트리밍: MJPEG 스트림 + 선택적 녹화 동시 진행 ✅
  6. 종료: Ctrl+C → 녹화 중지 → 카메라 정리 → 안전 종료 ✅

  🎯 구현된 핵심 기능

  웹 UI (HTML):
  - 녹화 버튼: "카메라0 녹화(30초)", "카메라1 녹화(30초)" ✅
  - 녹화 상태 표시: "카메라 0 녹화: 대기/녹화 중" ✅

  JavaScript 기능:
  - toggleRecording(cameraId): 녹화 시작/중지 토글 ✅
  - 실시간 녹화 상태 모니터링 ✅
  - 녹화 중 "REC" 상태 표시 ✅

  웹 API:
  - /api/recording/start/{camera_id}: 30초 녹화 시작 ✅
  - /api/recording/stop/{camera_id}: 녹화 중지 ✅
  - /api/recording/status: 녹화 상태 조회 ✅

  webmain.py:
  - 자동 연속 녹화 주석 처리 (선택적) ✅
  - 30초 단위 녹화 지원 ✅
  - 스트리밍 중단 없이 녹화 ✅

[cliet Web] -- [cliet Web] --[cliet Web] --[cliet Web] -- [cliet Web]
                              |
                            [HUB]
                              |
---------------       ---------------      ---------------
[라즈베리파이5 0]  ---- [라즈베리파이5 1]  ---- [라즈베리파이5 2] --- [NAS(영상 mp4 저장 후 user 스트리밍, 탐색)] 
---------------       ---------------      ---------------



# 수정 방향
  def stop_camera_stream(self, camera_id: int):
      # 스트리밍만 중지, 녹화는 유지
      # 연속 녹화는 enable_recording()/disable_recording()에서만 제어

  4. 리소스 공유 최적화

  - Picamera2 인스턴스: 공유 유지
  - 스트리밍: lores 스트림 사용
  - 녹화: main 스트림 사용 (GPU H.264)
  - 독립 운영: 서로 간섭 없이 동시 작동

  5. 구체적 수정 포인트

  A. webmain.py:327 라인
  # 제거: self.recorders[camera_id].stop_recording()
  # 추가: 스트리밍 관련 정리만

  B. 연속 녹화 생명주기
  시작: main() → enable_recording()
  유지: 웹 접속/해제와 무관하게 지속
  중지: shutdown() 또는 명시적 disable_recording()만

  C. 듀얼 모드 전환
  # disable_dual_mode()에서 녹화 유지
  # 카메라 전환만 수행, 녹화는 지속

  🎯 기대 효과

  ✅ 24시간 연속 녹화 보장✅ 웹 스트리밍 독립성 확보✅ 시스템 안정성 향상✅ 리소스 효율성 유지
  